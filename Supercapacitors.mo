within EVLibrary;

package Supercapacitors "Library for supercapacitor models"
  extends Modelica.Icons.Package;

  package Components "Components from different sources"
    extends Modelica.Icons.Package;

    model SupercapacitorSimple "A simple supercapacitor equivalent circuit"
      Modelica.Electrical.Analog.Basic.Resistor resistor(R(displayUnit = "mOhm") = 0.00025) annotation(
        Placement(visible = true, transformation(origin = {0, -0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Basic.Capacitor capacitor(C = 3400) annotation(
        Placement(visible = true, transformation(origin = {40, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Basic.Resistor resistor1(R = 1000) annotation(
        Placement(visible = true, transformation(origin = {40, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.ConstantVoltage constantVoltage(V = 2.85) annotation(
        Placement(visible = true, transformation(origin = {-40, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -180)));
      Modelica.Electrical.Analog.Interfaces.NegativePin pin_n annotation(
        Placement(visible = true, transformation(origin = {-120, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, -0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Interfaces.PositivePin pin_p annotation(
        Placement(visible = true, transformation(origin = {120, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(resistor1.n, pin_p) annotation(
        Line(visible = true, origin = {96, -20}, points = {{-46, -20}, {11, -20}, {11, 20}, {24, 20}}, color = {0, 0, 255}));
      connect(capacitor.n, pin_p) annotation(
        Line(visible = true, origin = {96, 20}, points = {{-46, 20}, {11, 20}, {11, -20}, {24, -20}}, color = {0, 0, 255}));
      connect(pin_n, constantVoltage.n) annotation(
        Line(visible = true, origin = {-85, 0}, points = {{-35, 0}, {35, 0}}, color = {0, 0, 255}));
      connect(constantVoltage.p, resistor.p) annotation(
        Line(visible = true, origin = {-20, -0}, points = {{-10, 0}, {10, -0}}, color = {0, 0, 255}));
      connect(resistor.n, resistor1.p) annotation(
        Line(visible = true, origin = {11.12, -20}, points = {{-1.12, 20}, {8.88, 20}, {8.88, -20}, {18.88, -20}}, color = {0, 0, 255}));
      connect(resistor.n, capacitor.p) annotation(
        Line(visible = true, origin = {11.5, 20}, points = {{-1.5, -20}, {8.5, -20}, {8.5, 20}, {18.5, 20}}, color = {0, 0, 255}));
      annotation(
        Documentation(info = "<ul>
<li>A first supercapacitor model with a voltage source embedded.</li>
</ul>", revisions = ""),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, fillColor = {255, 255, 255}, extent = {{-100, -100}, {100, 100}}), Rectangle(visible = true, fillColor = {88, 115, 255}, fillPattern = FillPattern.VerticalCylinder, extent = {{-40, -100}, {40, 100}}), Bitmap(visible = true, origin = {70.576, -72.732}, fileName = "", imageSource = "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geYEBKDmRq5hAgQIECBAQAByDRAgQIAAAQLNCQhAzY1cwwQIECBAgIAA5BogQIAAAQIEmhMQgJobuYYJECBAgAABAcg1QIAAAQIECDQnIAA1N3INEyBAgAABAgKQa4AAAQIECBBoTkAAam7kGiZAgAABAgQEINcAAQIECBAg0JyAANTcyDVMgAABAgQICECuAQIECBAgQKA5AQGouZFrmAABAgQIEBCAXAMECBAgQIBAcwICUHMj1zABAgQIECAgALkGCBAgQIAAgeYEBKDmRq5hAgQIECBAQAByDRAgQIAAAQLNCQhAzY1cwwQIECBAgIAA5BogQIAAAQIEmhMQgJobuYYJECBAgAABAcg1QIAAAQIECDQnIAA1N3INEyBAgAABAgKQa4AAAQIECBBoTkAAam7kGiZAgAABAgQEINcAAQIECBAg0JyAANTcyDVMgAABAgQICECuAQIECBAgQKA5AQGouZFrmAABAgQIEBCAXAMECBAgQIBAcwICUHMj1zABAgQIECAgALkGCBAgQIAAgeYEBKDmRq5hAgQIECBAQAByDRAgQIAAAQLNCQhAzY1cwwQIECBAgIAA5BogQIAAAQIEmhMQgJobuYYJECBAgAABAcg1QIAAAQIECDQnIAA1N3INEyBAgAABAgKQa4AAAQIECBBoTkAAam7kGiZAgAABAgQEINcAAQIECBAg0JyAANTcyDVMgAABAgQICECuAQIECBAgQKA5AQGouZFrmAABAgQIEBCAXAMECBAgQIBAcwICUHMj1zABAgQIECAgALkGCBAgQIAAgeYEBKDmRq5hAgQIECBAQAByDRAgQIAAAQLNCQhAzY1cwwQIECBAgIAA5BogQIAAAQIEmhMQgJobuYYJECBAgAABAcg1QIAAAQIECDQnIAA1N3INEyBAgAABAgKQa4AAAQIECBBoTkAAam7kGiZAgAABAgQEINcAAQIECBAg0JyAANTcyDVMgAABAgQICECuAQIECBAgQKA5AQGouZFrmAABAgQIEBCAXAMECBAgQIBAcwICUHMj1zABAgQIECAgALkGCBAgQIAAgeYEBKDmRq5hAgQIECBAQAByDRAgQIAAAQLNCQhAzY1cwwQIECBAgIAA5BogQIAAAQIEmhMQgJobuYYJECBAgAABAcg1QIAAAQIEZhS44IKIxx8f3uThhyMuuWT4MR+VIyAAlTMLlRAgQIBATwWuvTbiySeHi3/ssYibbhp+zEflCAhA5cxCJQQIECBAgMCcBASgOUF7GgIECBAgQKAcAQGonFmohAABAgQIEJiTgAA0J2hPQ4AAAQIECJQjIACVMwuVECBAgAABAnMSEIDmBO1pCBAgQIAAgXIE1pRTikoIECBAoEWBBx+MOPvsiLVrR3f/wgsR
mzZFvOMdo9c4kybw7W9H3HBDxB5jXgrZti3iiisiDj00be8+rBaA+jAlNRIgQKBigYsuivjRjyY3+OtfC0CTlaZfsXlzxMc+FrFu3ejPufHGiK98JaKbUW2HAFTbRPVDgACBngmsXj1dwdOum243q9YMEsDGjRHr14+26O5mvXXr6PN9PjPmha8+t6V2AgQIECBAgMBoAa8AjbZxhgABAr0WeO65iO49HKUf27eXXmHb9T37bMRTT9VnIADVN1MdESBA4EWBww6LeOKJejAeeSRin33K7GfPPZeu6/77y635gAOWrnnXRy+9NOLii3d9tP8fC0D9n6EOCBAgsKRAFxa6n1J+yilLni7mwfPOW/hupEkFHXFExD33TFq1MuePO27p592wIeKWW5Y+t9KPHn/8dBWcdVbEuedOt7ZPqwSgPk1LrQQIEEgQ6ALQUUct/Er4tLkv3W+/6Z9y772nXzvPlatWLf1s3eOl1rx0xbs/euCB5V9Du1c9+RFvgp5sZAUBAgQIECBQmYBXgCobqHYIECDQN4HuJofTHM8/P80qa6YV6N58ftttEd23uo86unsvHXnkqLP9flwA6vf8VE+AAIHeC3Q34/vVrybfCbp7L4pj+QQ+/emIa6+dfCfoz31u+Z6zpJ0EoJKmoRYCBAg0KHDCCRF3391g4yvc8plnRnS/Wj28B6jVyeubAAECBAg0LCAANTx8rRMgQIAAgVYFBKBWJ69vAgQIECDQsIAA1PDwtU6AAAECBFoVEIBanby+CRAgQIBAwwICUMPD1zoBAgQIEGhVQABqdfL6JkCAAIFlE9i4MWL//Ye3O+SQiJNOGn7MR+UIrNoxOMopRyUECBAgsFwC69dHXHJJ+T8Mdbn6tQ+BFAGvAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoWUuAAAECBAhUISAAVTFGTRAgQIAAAQIpAgJQipa1BAgQIECAQBUCAlAVY9QEAQIECBAgkCIgAKVoZV77zDMRW7ZkfhLbEyBAgAABAiEAFXQR/OQnEe97X0EFKYUAAQIECFQqIABVOlhtESBAgAABAqMFBKDRNs4QIECAAAEClQoIQJUOVlsECBAgQIDAaAEBaLSNMwQIECBAgEClAgJQpYPVFgECBAgQIDBaQAAabeMMAQIECBAgUKmAAFTpYLVFgAABAgQIjBYQgEbbOEOAAAECBAhUKiAAVTpYbREgQIAAAQKjBQSg0TbOECBAgAABApUKCECVDlZbBAgQIECAwGgBAWi0jTMECBAgQIBApQJrKu2rF209+WTEgQf2olRF9lhg+/aIL30p4vHHe9zEMpS+bl3EuedGrPGn3jJo2oJA/wX8UbCCM+z+QH7iiYi9917BIjx19QI/+EHEd74TccYZ1bc6tsGrroo49tiIjRvHLnOSAIFGBASgRgatzbYFjjwy4pxz2ja45Za2+9c9AQLDAt4DNOzhIwIECBAgQKABAQGogSFrkQABAgQIEBgWEICGPXxEgAABAgQINCAgADUwZC0SIECAAAECwwIC0LCHjwgQIECAAIEGBASgBoasRQIECBAgQGBYoFffBr9jR8R99w03sNRHr31txEEHLXXGY69E4G9/i/jNbyZ/5nHHRaxePXmdFdMJPPro5JsX7rNPxNFHT7efVdMJPPRQxNat49ceemjEq189fo2zBAiULdCrAPTNb0Z89rPj75783HMRr3tdxM03lw3fp+re9a6IO+6I2GPM64Xd3YbPPz9i8+Y+dVZurX//e8Sb3xzR3S183LF2bcT3vx/xpjeNW+XctAI/+1nEhz88/lrv9ur+XbjzznJvYnrrrQv/Pv7udxFnnRVx++0Rn/98xJ57TithHYH6BXoVgB58cOEPp09+cvRgujXvfOfo886kCzz8cET3KtCko/svZ8fyCHRBfsuWiG3bxu93wAERf/zj+DXOTi/QverWvaJ2/fXjP2f//SO60F/i8YEPRHzjGy9X1l0fl14aceWVEffeG9G9Qu4gQGDwHzIQCBAgQKAOgSuuGA4/i7vqXk3sXlV0ECCwICAAuRIIECBQicBnPjO+ke7VoO99b/waZwm0IrDmox/tT6s//3nEaadNrveZZxbeKzR55cqueOGF3Z//D38or/ZpvvzVddK9f6JP19Pu+uU88uyz032JpfvGgG99a+FLG6Oqf+CByV9KG/W5NT3efTnx2msj7r57dFf33x/RmU46ui9/nXji5PcKTdpnuc//6U+Td7zxxoi3v33yOisI1C7Qq/cApQxjmj/EUvab59o+1z5PJ8+1INBdL66ZyVfDTidWk62sINCCwJrLLutPm5/61HS17r13xIUXTrd2JVd98Yu7P3v3U7tLq/2aayIe
e2z3Wnd9pHt/QZ+up13rL+nj7v0aV10V8fzz46tatSri3e+OOOWU0eu++93R7wsZ/Vn1nen+XDj99IiNG0f3dsMNC68SjV6xcGbN4D8du1ek99tv0sr5nj/ssIhJrwKdeup8a/JsBEoV8B6gUiejLgIECCQKdLcJGXd09y7y5a9xQs61JCAAtTRtvRIgULXApk0R3bfBL3UceODC+/SWOucxAi0K9Oo9QBs2LNzc6+qrR4+qe3PiMceMPu9MusD69Qv3mpl0I0Tu6bajPqO7weG6dRFPPDFqxcLj3Y3tjjhi/BpnpxfovgTd3Uvs+OPHf84b3hDRfRmsxOPrX48444yFPyvvuivikEMWvvTnRoglTktNKylQ6L/CS5O8970Rb3zj0ucWP/qa1yz+yO9nFei+y6i7o+ykowuojuUReNWrFt5j8uc/j9+v+1EY3Z3PHcsj0N1Ru/suqe47SccdBx9c7l2gu7rf9raFuz93//FyySXj3yM2rk/nCNQs0KsA1L3hs/t5U45lENgasWnwl+x/DLb65eAuzyeMeTNnd9db7stgnrhF9wpQ98sxX4EuNDgIEKhfwHuA6p/xyA63vHRm8FMXHAQIECBAoCkBAaipcS9qdvDt1WNe9Fm00G8JECBAgEB9AgJQfTOdrqPBPVF2HmtX7/ydfxIgQIAAgTYEevUeoDZGkqnLwXt+/u1fI+4/6OX9b3rpt+cNbg638+H/fTjizMF32Z0+4btgXt7F7wgQIECAQP8EBKD+zewVV3znjyMG/9vt+PHOJPTSmZOf3m2JBwgQIECAQFUCTQWgx2+L+Jd/Hsxv8asb/x3xj5dH/OfgBmJVH4Nvl776lxH3DX7EwuDWMYOfbTGweM9Cx5ffHHHsvhEvvhl68EM4D/dt1VVfCpojQIAAgcG9vFpC+J/BTysf5J2X/m9R5/+36PcV//bwEwbhZmd/gxtGnjEIQP81+PifThpkwkFActQr8PvfR1x6ab39TdPZI49Ms8oaAgRaEWgqAP3DyRHXbYjYa5fp7nvULg/M6cPuJnfdD2hckWPR974/O/iOMEe9At0P/3zooYW7edfb5eTOuh+EevLgzwAHAQIEOoGmAtAhgy99nbb4y18rfA3sO/iy00oeT7305Iuy0EqW47kzCawefJffJz6RaXPbEiBAoKcCTQWgns4oT9mDL3n9+3WDW+YPXoU6fPAXpIMAAQIECLQkIAC1NO1dej3htMGPwNjlMR8SIECAAIEWBNwIsYUp65EAAQIECBAYEhCAhjh8QIAAAQIECLQgIAC1MGU9EiBAgAABAkMCAtAQhw8IECBAgACBFgQEoBamrEcCBAgQIEBgSEAAGuLwAQECBAgQINCCgADUwpT1SIAAAQIECAwJCEBDHD4gQIAAAQIEWhAQgFqYsh4JECBAgACBIQEBaIjDBwQIECBAgEALAn4URkFTfutbBz+aws+mKGgiSiFAgACBWgUEoIImu9deEd0vBwECBAgQIJBXwJfA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCsgAOX1tTsBAgQIECBQoIAAVOBQlESAAAECBAjkFRCA8vranQABAgQIEChQQAAqcChKIkCAAAECBPIKCEB5fe1OgAABAgQIFCggABU4FCURIECAAAECeQUEoLy+didAgAABAgQKFBCAChyKkggQIECAAIG8AgJQXl+7EyBAgAABAgUKCEAFDkVJBAgQIECAQF4BASivr90JECBAgACBAgUEoAKHoiQCBAgQIEAgr4AAlNfX7gQIECBAgECBAgJQgUNREgECBAgQIJBXQADK62t3AgQIECBAoEABAajAoSiJAAECBAgQyCuwJu/2didAgAABAvMT2Lo14q9/nd/zlfpMBx8csddepVZXRl0CUBlzUAUBAgQILIPA+98f8dOfRqxevQyb9XSL7dsjTj014vLLe9rAnMoWgOYE7WkIECBAIL/AffdF3HprxDHH5H+uUp/hjjsiNm8utbpy6vIeoHJmoRICBAgQIEBgTgIC0JygPQ0BAgQIECBQjoAAVM4sVEKAAAECBAjMSUAAmhO0pyFAgAABAgTKERCAypmFSggQIECAAIE5CQhAc4L2NAQIECBAgEA5AgJQObNQCQECBAgQIDAnAfcBmhO0pyFAgACBpQV+8YuID30oYu3apc93j77wQsRHPhLxwQ+OXuNMmkB3o8Trr4/YY8xLIdu2RVx1VcRRR6Xt3YfVAlAfpqRGAgQIVCzw1a9G3HPP5Aa/8AUBaLLS9CsuvjjiwgsjDj989Odcc03ElVdGXHTR6DV9PSMA9XVy6iZAgEAlAuNegVjcYss/3mKxw3L9vvN8y1si1q8fveNdd0V0P1+txmPMC181tqsnAgQIECBAgECEV4BcBQQIEKhUoPsv99/+duFXyS0+9dR01e3YEfH00+PXdmscC++ZWi6rJ58s/xp6JTMXgF6Jms8hQIBADwS6APTxjy/86kG5E0t89NGIww4bv2yNv9VeBHrwwclW++473nLn2a99LeKyy3Z+VM8/XSr1zFInBAgQGBLYsiWi+y6e0o9NmyKuvnpylUccEfHAA+PXbdgw/nwrZzuH228f3+3rXz/+
/M6z554bccEFOz+q558CUD2z1AkBAgSGBLpvKx/3reVDi1fwA6/arCD+FE+9554R++03xcKeLfEm6J4NTLkECBAgQIDA7AJeAZrd0A4ECBAgMIPA889P98nbt0+3zqrpBJ57LuLmm8e/V+jeeyOOPnq6/fq2SgDq28TUS4AAgcoEzj8/4i9/GXxb8pi/kbo7QXfvFXIsn8CXvxxx3XXj7wTdPds55yzfc5a005jLraQy1UKAAAECtQp0rzD88Ie1dlduX6eeGtH9avXwHqBWJ69vAgQIECDQsIAA1PDwtU6AAAECBFoVEIBanby+CRAgQIBAwwICUMPD1zoBAgQIEGhVQABqdfL6JkCAAAECDQsIQA0PX+sECBAgQKBVAQGo1cnrmwABAgQINCzgPkAND1/rBAgQqE3gxBMjjj++tq7S+zn77PTPae0zVu0YHK01rV8CBAgQqFOg+xtt2h+tUafAQlerV0esWlVzh7P3JgDNbmgHAgQIECBAoGcC3gPUs4EplwABAgQIEJhdQACa3dAOBAgQIECAQM8EBKCeDUy5BAgQIECAwOwCAtDshnYgQIAAAQIEeiYgAPVsYMolQIAAAQIEZhcQgGY3tAMBAgQIECDQMwEBqGcDUy4BAgQIECAwu4AANLuhHQgQIECAAIGeCQhAPRuYcgkQIECAAIHZBQSg2Q3tQIAAAQIECPRMQADq2cCUS4AAAQIECMwuIADNbmgHAgQIECBAoGcCAlDPBqZcAgQIECBAYHYBAWh2QzsQIECAAAECPRMQgHo2MOUSIECAAAECswsIQLMb2oEAAQIECBDomYAA1LOBKZcAAQIECBCYXUAAmt3QDgQIECBAgEDPBASgng1MuQQIECBAgMDsAgLQ7IZ2IECAAAECBHomIAD1bGDKJUCAAAECBGYXEIBmN7QDAQIECBAg0DMBAahnA1MuAQIECBAgMLuAADS7oR0IECBAgACBngkIQD0bmHIJECBAgACB2QUEoNkN7UCAAAECBAj0TEAA6tnAlEuAAAECBAjMLiAAzW5oBwIECBAgQKBnAgJQzwamXAIECBAgQGB2AQFodkM7ECBAgAABAj0TEIB6NjDlEiBAgAABArMLCECzG9qBAAECBAgQ6JmAANSzgSmXAAECBAgQmF1AAJrd0A4ECBAgQIBAzwQEoJ4NTLkECBAgQIDA7AIC0OyGdiBAgAABAgR6JiAA9WxgyiVAgAABAgRmFxCAZje0AwECBAgQINAzAQGoZwNTLgECBAgQIDC7gAA0u6EdCBAgQIAAgZ4J/D+HrRfb6yBgjwAAAABJRU5ErkJggg==
        ", extent = {{-30.147, -27.268}, {30.147, 27.268}})}),
        experiment(__Wolfram_SynchronizeWithRealTime = false),
        Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
    end SupercapacitorSimple;

    model SupercapacitorEhsani "A supercapacitor equivalent circuit inspired by Ehsani et.al."
      Modelica.Electrical.Analog.Basic.Resistor rseries(R(displayUnit = "mOhm") = 0.00025) annotation(
        Placement(visible = true, transformation(origin = {60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Basic.Capacitor capacitor(C = 2600) annotation(
        Placement(visible = true, transformation(origin = {-20, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Basic.Resistor rL(R = 1000) annotation(
        Placement(visible = true, transformation(origin = {-20, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Interfaces.NegativePin pin_n annotation(
        Placement(visible = true, transformation(origin = {-120, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, -0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Interfaces.PositivePin pin_p annotation(
        Placement(visible = true, transformation(origin = {120, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.ConstantVoltage constantVoltage(V = 2.7) annotation(
        Placement(visible = true, transformation(origin = {-80, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -180)));
    equation
      connect(constantVoltage.p, rL.p) annotation(
        Line(visible = true, origin = {-68.5, -20}, points = {{-1.5, 20}, {8.5, 20}, {8.5, -20}, {38.5, -20}}, color = {0, 0, 255}));
      connect(constantVoltage.p, capacitor.p) annotation(
        Line(visible = true, origin = {-68.5, 20}, points = {{-1.5, -20}, {8.5, -20}, {8.5, 20}, {38.5, 20}}, color = {0, 0, 255}));
      connect(pin_n, constantVoltage.n) annotation(
        Line(visible = true, origin = {-105, 0}, points = {{-15, -0}, {15, 0}}, color = {0, 0, 255}));
      connect(capacitor.n, rseries.p) annotation(
        Line(visible = true, origin = {1.5, 20}, points = {{-11.5, 20}, {18.5, 20}, {18.5, -20}, {48.5, -20}}, color = {0, 0, 255}));
      connect(rseries.p, rL.n) annotation(
        Line(visible = true, origin = {38.875, -20}, points = {{11.125, 20}, {-18.875, 20}, {-18.875, -20}, {-48.875, -20}}, color = {0, 0, 255}));
      connect(pin_p, rseries.n) annotation(
        Line(visible = true, origin = {95, 0}, points = {{25, 0}, {-25, -0}}, color = {0, 0, 255}));
      annotation(
        Documentation(info = "<ul>
<li>Supercapacitor model inspired by the book \"Modern Electric, Hybrid Electric, and Fuel Cell Vehicles - Fundamentals, Theory, and Design\"by Ehsani et. al., Second Ed, pp. 392-395.</li>
<li>Basic curve fitting has been done to get the same discharge curve as pictured in the book.</li>
</ul>", revisions = ""),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, fillColor = {255, 255, 255}, extent = {{-100, -100}, {100, 100}}), Rectangle(visible = true, fillColor = {88, 115, 255}, fillPattern = FillPattern.VerticalCylinder, extent = {{-39.192, -100}, {39.192, 100}}), Bitmap(visible = true, origin = {70, -75}, fileName = "modelica://Supercapacitors.Components.SupercapacitorEhsani/DocumentationFiles/ehsani.png", imageSource = "", extent = {{-30, -25}, {30, 25}})}),
        experiment(__Wolfram_SynchronizeWithRealTime = false),
        Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
    end SupercapacitorEhsani;

    model SupercapacitorZubieta "A supercapacitor equivalent circuit inspired by Zubieta et.al."
      Modelica.Electrical.Analog.Interfaces.NegativePin pin_n annotation(
        Placement(visible = true, transformation(origin = {-120, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Interfaces.PositivePin pin_p annotation(
        Placement(visible = true, transformation(origin = {-120, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Basic.Resistor Ri(R(displayUnit = "mOhm") = 0.0015) annotation(
        Placement(visible = true, transformation(origin = {-50, 20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Capacitor Ci0(C = 900) annotation(
        Placement(visible = true, transformation(origin = {-50, -20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.VariableCapacitor variableCapacitor(IC = 0, UIC = true) annotation(
        Placement(visible = true, transformation(origin = {-20, -20}, extent = {{-10, 10}, {10, -10}}, rotation = 90)));
      Modelica.Electrical.Analog.Basic.Capacitor Cd(C = 200) annotation(
        Placement(visible = true, transformation(origin = {20, -20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Resistor Rd(R = 0.4) annotation(
        Placement(visible = true, transformation(origin = {20, 20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Resistor Rl(R = 3.2) annotation(
        Placement(visible = true, transformation(origin = {50, 20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Capacitor Cl(C = 330) annotation(
        Placement(visible = true, transformation(origin = {50, -20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Resistor Rlea(R(displayUnit = "kOhm") = 4000) annotation(
        Placement(visible = true, transformation(origin = {80, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor annotation(
        Placement(visible = true, transformation(origin = {-80, -20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Blocks.Math.Gain gain(k = 600) annotation(
        Placement(visible = true, transformation(origin = {-100, 0}, extent = {{10, -10}, {-10, 10}}, rotation = -90)));
    equation
      connect(Ci0.p, voltageSensor.p) annotation(
        Line(visible = true, origin = {-65, -1.5}, points = {{15, -8.5}, {15, 1.5}, {-15, 1.5}, {-15, -8.5}}, color = {0, 0, 255}));
      connect(Ci0.n, voltageSensor.n) annotation(
        Line(visible = true, origin = {-65, -38.5}, points = {{15, 8.5}, {15, -1.5}, {-15, -1.5}, {-15, 8.5}}, color = {0, 0, 255}));
      connect(variableCapacitor.C, gain.y) annotation(
        Line(visible = true, origin = {-36.2, 11.8}, points = {{27.2, -31.8}, {36.2, -31.8}, {36.2, 22.2}, {-63.8, 22.2}, {-63.8, -0.8}}, color = {0, 0, 127}));
      connect(voltageSensor.v, gain.u) annotation(
        Line(visible = true, origin = {-96.667, -17.333}, points = {{6.667, -2.667}, {-3.333, -2.667}, {-3.333, 5.333}}, color = {0, 0, 127}));
      connect(Cd.n, variableCapacitor.p) annotation(
        Line(visible = true, origin = {10, -38.5}, points = {{10, 8.5}, {10, -1.5}, {-30, -1.5}, {-30, 8.5}}, color = {0, 0, 255}));
      connect(variableCapacitor.p, Ci0.n) annotation(
        Line(visible = true, origin = {-35, -38.5}, points = {{15, 8.5}, {15, -1.5}, {-15, -1.5}, {-15, 8.5}}, color = {0, 0, 255}));
      connect(Ci0.n, pin_n) annotation(
        Line(visible = true, origin = {-73.333, -36.667}, points = {{23.333, 6.667}, {23.333, -3.333}, {-46.667, -3.333}}, color = {0, 0, 255}));
      connect(Ri.p, pin_p) annotation(
        Line(visible = true, origin = {-73.333, 36.667}, points = {{23.333, -6.667}, {23.333, 3.333}, {-46.667, 3.333}}, color = {0, 0, 255}));
      connect(Rlea.n, Cl.n) annotation(
        Line(visible = true, origin = {85, -30}, points = {{-5, 20}, {-5, -10}, {-35, -10}, {-35, 0}}, color = {0, 0, 255}));
      connect(Rl.p, Rlea.p) annotation(
        Line(visible = true, origin = {85, 33.5}, points = {{-35, -3.5}, {-35, 6.5}, {-5, 6.5}, {-5, -23.5}}, color = {0, 0, 255}));
      connect(Cd.n, Cl.n) annotation(
        Line(visible = true, origin = {55, -38.5}, points = {{-35, 8.5}, {-35, -1.5}, {-5, -1.5}, {-5, 8.5}}, color = {0, 0, 255}));
      connect(Rl.n, Cl.p) annotation(
        Line(visible = true, origin = {50, 0}, points = {{0, 10}, {0, -10}}, color = {0, 0, 255}));
      connect(Rd.n, Cd.p) annotation(
        Line(visible = true, points = {{0, 10}, {0, -10}}, color = {0, 0, 255}, origin = {20, 0}));
      connect(Rd.p, Rl.p) annotation(
        Line(visible = true, origin = {55, 38.5}, points = {{-35, -8.5}, {-35, 1.5}, {-5, 1.5}, {-5, -8.5}}, color = {0, 0, 255}));
      connect(Ri.p, Rd.p) annotation(
        Line(visible = true, origin = {20, 38.5}, points = {{-70, -8.5}, {-70, 1.5}, {0, 1.5}, {0, -8.5}}, color = {0, 0, 255}));
      connect(variableCapacitor.n, Ri.n) annotation(
        Line(visible = true, origin = {-35, -3.5}, points = {{15, -6.5}, {15, 3.5}, {-15, 3.5}, {-15, 13.5}}, color = {0, 0, 255}));
      connect(Ri.n, Ci0.p) annotation(
        Line(visible = true, origin = {-50, 0}, points = {{0, 10}, {0, -10}}, color = {0, 0, 255}));
      annotation(
        Documentation(info = "<ul>
<li>Model inspired by the paper by&nbsp;Zubieta et. al. \"Characterization of double-layer capacitors for power electronics applications\",&nbsp;IEEE Transactions on Industry Applications, 2000\"&nbsp;<a href=\"http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=821816\">IEEEXplore link</a></li>
<li>Sometimes called the \"Toronto model.\"</li>
</ul>", revisions = ""),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, fillColor = {255, 255, 255}, extent = {{-100, -100}, {100, 100}}), Rectangle(visible = true, fillColor = {88, 115, 255}, fillPattern = FillPattern.VerticalCylinder, extent = {{-39.192, -100}, {39.192, 100}}), Bitmap(visible = true, origin = {69.279, -83.331}, fileName = "", imageSource = "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AgQIECBAgECBBARzCtRZqkqAAAECBAgQIECAAAECBAgQEMxxDRAgQIAAAQIECBAgQIAAAQIECiQgmFOgzlJVAgQIECBAgAABAgQIECBAgIBgjmuAAAECBAgQIECAAAECBAgQIFAgAcGcAnWWqhIgQIAAAQIECBAgQIAAAQIEBHNcAwQIECBAgAABAgQIECBAgACBAgkI5hSos1SVAAECBAgQIECAAAECBAgQICCY4xogQIAAAQIECBAgQIAAAQIECBRIQDCnQJ2lqgQIECBAgAABAgQIECBAgAABwRzXAAECBAgQIECAAAECBAgQIECgQAKCOQXqLFUlQIAAAQIECBAgQIAAAQIECAjmuAYIECBAgAABAgQIECBAgAABAgUSEMwpUGepKgECBAgQIECAAAECBAgQIEBAMMc1QIAAAQIECBAgQIAAAQIECBAokIBgToE6S1UJECBAgAABAgQIECBAgAABAoI5rgECBAgQIECAAAECBAgQIECAQIEEBHMK1FmqSoAAAQIECBAgQIAAAQIECBAQzHENECBAgAABAgQIECBAgAABAgQKJCCYU6DOUlUCBAgQIECAAAECBAgQIECAgGCOa4AAAQIECBAgQIAAAQIECBAgUCABwZwCdZaqEiBAgAABAgQIECBAgAABAgQEc1wDBAgQIECAAAECBAgQIECAAIECCQjmFKizVJUAAQIECBAgQIAAAQIECBAgIJjjGiBAgAABAgQIECBAgAABAgQIFEhAMKdAnaWqBAgQIECAAAECBAgQIECAAAHBHNcAAQIECBAgQIAAAQIECBAgQKBAAoI5BeosVSVAgAABAgQIECBAgAABAgQICOa4BggQIECAAAECBAgQIECAAAECBRIQzClQZ6kqAQIECBAgQIAAAQIECBAgQEAwxzVAgAABAgQIECBAgAABAgQIECiQgGBOgTpLVQkQIECAAAECBAgQIECAAAECgjmuAQIECBAgQIAAAQIECBAgQIBAgQQEcwrUWapKgAABAgQIECBAgAABAgQIEBDMcQ0QIECAAAECBAgQIECAAAECBAokIJhToM5SVQIECBAgQIAAAQIECBAgQICAYI5rgAABAgQIECBAgAABAgQIECBQIAHBnAJ1lqoSIECAAAECBAgQIECAAAECBARzXAMECBAgQIAAAQIECBAgQIAAgQIJCOYUqLNUlQABAgQIECBAgAABAgQIECAgmOMaIECAAAECBAgQIECAAAECBAgUSEAwp0CdpaoECBAgQIAAAQIECBAgQIAAAcEc1wABAgQIECBAgAABAgQIECBAoEACgjkF6ixVJUCAAAECBAgQIECAAAECBAgI5rgGCBAgQIAAAQIECBAgQIAAAQIFEhDMKVBnqSoBAgQIECBAgAABAgQI
ECBAQDDHNUCAAAECBAgQIECAAAECBAgQKJCAYE6BOktVCRAgQIAAAQIECBAgQIAAAQKCOa4BAgQIECBAgAABAgQIECBAgECBBARzCtRZqkqAAAECBAgQIECAAAECBAgQEMxxDRAgQIAAAQIECBAgQIAAAQIECiQgmFOgzlJVAgQIECBAgAABAgQIECBAgIBgjmuAAAECBAgQIECAAAECBAgQIFAgAcGcAnWWqhIgQIAAAQIECBAgQIAAAQIEBHNcAwQIECBAgAABAgQIECBAgACBAgkI5hSos1SVAAECBAgQIECAAAECBAgQICCY4xogQIAAAQIECBAgQIAAAQIECBRIQDCnQJ2lqgQIECBAgAABAgQIECBAgAABwRzXAAECBAgQIECAAAECBAgQIECgQAKCOQXqLFUlQIAAAQIECBAgQIAAAQIECAjmuAYIECBAgAABAgQIECBAgAABAgUSEMwpUGepKgECBAgQIECAAAECBAgQIEBAMMc1QIAAAQIECBAgQIAAAQIECBAokIBgToE6S1UJECBAgAABAgQIECBAgAABAoI5rgECBAgQIECAAAECBAgQIECAQIEEBHMK1FmqSoAAAQIECBAgQIAAAQIECBAQzHENECBAgAABAgQIECBAgAABAgQKJCCYU6DOUlUCBAgQIECAAAECBAgQIECAgGCOa4AAAQIECBAgQIAAAQIECBAgUCABwZwCdZaqEiBAgAABAgQIECBAgAABAgQEc1wDBAgQIECAAAECBAgQIECAAIECCQjmFKizVJUAAQIECBAgQIAAAQIECBAgIJjjGiBAgAABAgQIECBAgAABAgQIFEhAMKdAnaWqBAgQIECAAAECBAgQIECAAAHBHNcAAQIECBAgQIAAAQIECBAgQKBAAoI5BeosVSVAgAABAgQIECBAgAABAgQICOa4BggQIECAAAECBAgQIECAAAECBRIQzClQZ6kqAQIECBAgQIAAAQIECBAgQEAwxzVAgAABAgQIECBAgAABAgQIECiQgGBOgTpLVQkQIECAAAECBAgQIECAAAECgjmuAQIECBAgQIAAAQIECBAgQIBAgQQEcwrUWapKgAABAgQIECBAgAABAgQIEBDMcQ0QIECAAAECBAgQIECAAAECBAokIJhToM5SVQIECBAgQIAAAQIECBAgQICAYI5rgAABAgQIECBAgAABAgQIECBQIAHBnAJ1lqoSIECAAAECBAgQIECAAAECBARzXAMECBAgQIAAAQIECBAgQIAAgQIJCOYUqLNUlQABAgQIECBAgAABAgQIECAgmOMaIECAAAECBAgQIECAAAECBAgUSEAwp0CdpaoECBAgQIAAAQIECBAgQIAAAcEc1wABAgQIECBAgAABAgQIECBAoEACgjkF6ixVJUCAAAECBAgQIECAAAECBAgI5rgGCBAgQIAAAQIECBAgQIAAAQIFEhDMKVBnqSoBAgQIECBAgAABAgQIECBAYBiC5gv85S8RBxwQMSxH2lOnRuyxR8Q3vtH89jsDAQIECBAgQIAAAQIECBAg0DiBIdNKU+OKU9KsBLbZJuKaa2a1pb3rRo2KeP759tbB2QkQIECAAAECBAgQIECAAIH6BNxmVZ/XgPYeOnRAhzX9oDn0ftONnYAAAQIECBAgQIAAAQIECDRawK/zjRZVHgECBAgQIECAAAECBAgQIECgiQKCOU3EVTQBAgQIECBAgAABAgQIECBAoNECgjmNFlUeAQIECBAgQIAAAQIECBAgQKCJAoI5TcRVNAECBAgQIECAAAECBAgQIECg0QKCOY0WVR4BAgQIECBAgAABAgQIECBAoIkCgjlNxFU0AQIECBAgQIAAAQIECBAgQKDRAoI5jRZVHgECBAgQIECAAAECBAgQIECgiQKCOU3EVTQBAgQIECBAgAABAgQIECBAoNECgjmNFlUeAQIECBAgQIAAAQIECBAgQKCJAoI5TcRVNAECBAgQIECAAAECBAgQIECg0QKCOY0WVR4BAgQIECBAgAABAgQIECBAoIkCgjlNxFU0AQIECLRG4PXXI/74x4hHH23N+ZyFAAECRREYPz7ippsiHnqoKDVWz3YLpO/S9J2avltNBAjkV0AwJ799o2YECBAgMBuBxx+PWGWViPe9L2KzzSJWXjli/vkjzj57NgfaTIAAgQ4XGDcu4sMfjlhggYhNNolYddWIeeeN+OlPO7zhmjdggfTdmb5D03dp+k5N363pOzZ915oIEMifgGBO/vpEjQgQIECgBoFnn4344AcjHn64785vvhnxhS9EnHJK3/XeESBAoFsEXn01YqWVIu67r2+LJ0yI2HffiO9+t+967wik78z03Zm+Q3tP6Ts2fdem71wTAQL5EhgyrTTlq0qdV5vttou48sr8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CBAgQIAAgaYJCOY0jVbBBAgQIECAAAECBAgQIECAAIHGCwjmNN5UiQQIECBAgAABAgQIECBAgACBpgkI5jSNVsEECBAgQIAAAQIECBAgQIAAgcYLCOY03lSJBAgQIECAAAECBAgQIECAAIGmCQjmNI1WwQQIECBAgAABAgQIECBAgACBxgsI5jTeVIkECBAgQIAAAQIECBAgQIAAgaYJCOY0jVbBBAgQIECAAAECBAgQIECAAIHGCwjmNN5UiQQIECBAgAABAgQIECBAgACBpgkI5jSNVsEECBAgQIAAAQIECBAgQIAAgcYLCOY03lSJBAgQIECAAAECBAgQIECAAIGmCQjmNI1WwQQIECBAgAABAgQIECBAgACBxgsI5jTeVIkECBAgQIAAAQIECBAgQIAAgaYJCOY0jVbBBAgQIECAAAECBAgQIECAAIHGCwjmNN5UiQQIECBAgAABAgQIECBAgACBpgkI5jSNVsEECBAgQIAAAQIECBAgQIAAgcYLCOY03lSJBAgQIECAAAECBAgQIECAAIGmCQjmNI1WwQQIECBAgAABAgQIECBAgACBxgsI5jTeVIkECBAgQIAAAQIECBAgQIAAgaYJCOY0jVbBBAgQIECAAAECBAgQIECAAIHGCwjmNN5UiQQIECBAgAABAgQIECBAgACBpgkI5jSNVsEECBAgQIAAAQIECBAgQIAAgcYLCOY03lSJBAgQIECAAAECBAgQIECAAIGmCQjmNI1WwQQIECBAgAABAgQIECBAgACBxgsI5jTeVIkECBAgQIAAAQIECBAgQIAAgaYJCOY0jVbBBAgQIECAAAECBAgQIECAAIHGCwjmNN5UiQQIECBAgAABAgQIECBAgACBpgkI5jSNVsEECBAgQIAAAQIECBAgQIAAgcYLCOY03lSJBAgQIECAAAECBAgQIECAAIGmCQjmNI1WwQQIECBAgAABAgQIECBAgACBxgsI5jTeVIkECBAgQIAAAQIECBAgQIAAgaYJDGtayQomQIAAAQIDEHjvvYizzopYcMEBHDyAQ157bQAHOYQAAQJtEHj33Yjzz49YYonWnPz551tzHmdpnsArr0T85CfNK793ya++GpG+w00ECLRGQDCnNc7OQoAAAQI1ClxwQcTVV0fUG2S5+OKIzTevPwj09a9HrLVWjZWzGwECBNoocPbZEemz7skn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x46N/gI52dEpM+fQQw/N3poTIECAAAECBAgQIEAgdwKCObnrEhUikC+Bn/70p/GFL3whX5WqsTZp0OaFFloodt555zjjjDNqOmqvvfaKn/zkJzXtaycCBAgQIECAAAECBAi0Q8BtVu1Qd04CBRF45JFHYurUqbHyyisXpMaVal599dXxi1/8IsaNGxdzzjlnZcNslkaO
HBkbbrhh3HDDDfHJT35yNnvbTIAAAQIECBAgQIAAgdYLyMxpvbkzEiiMwBVXXBFbbbVVYerbu6ILLrhg/P73v68rkJMdn9qc2m4iQIBApwmMHz+p05qkPQQIECBAoCsFBHO6sts1mkBtAimgsc0229S2c872+tjHPjbgGnonnAgAACyKSURBVKU2C+YMmM+BBAjkUODKKx+KpZc+KQ4//I85rJ0qESBAgAABAvUKCObUK2Z/Al0ikB7jnW6zWnfddRva4vRY8HfeeaehZTa6sCWWWCLS66677mp00cojQIBASwVSEGeFFX4Se+55RTz77Jtx//0vtfT8TkaAAAECBAg0R0AwpzmuSiVQeIErr7yyoVk5Tz31VBx11FGx6qqrxn333Zd7n6233jqSgYkAAQJFFOgdxHniidfi9dfzHUQvorE6EyBAgACBdgoYALmd+s5NIMcCd999dwzmVqXUtJSBc9VVV8U555wT6clStU5vvPFGPProo/Hee++VB19eeOGFaz20Yfultp966qkNK09BBAgQaIVACuLsv/8f4tVXJwrgtALcOQgQIECAQJsEBHPaBO+0BNolMGbM2FKQ5gOzPf1jjz0Wm2+++Wz3m9UO999/f/z617+Oiy66qPTLxOvTd5lvvvliu+22i2WXXXb6ut4LkydPjpNOOinuvffeWGmllWLuueeOn//85zF69Oj48pe/HIsuumjv3Zu6nM710EMPNfUcCidAgECjBARxGiWpHAIECBAgUAwBwZxi9JNaEhi0wI03Ph5HHHFzvPTS2/Gd73ysNH7CGlXLfO6558rjxlTdqdfGlE1zySWXlLNw/vGPf0zfMmzYsHJQaNddd40tttgi5pprrunbei+8/fbb5YDNgQceGAcffHDvTZFu0dp///3j5JNPbllAJ42Zkx5rbiJAgECeBQRx8tw76kaAAAECBJonIJjTPFslE8iFQBbEmWeeEfGjH30yzj77HzF58tTZ1i0FMlJAo9o0bdq0uOWWW8pZOOnpT70HNl5vvfUiBXB22GGHWGihhaoVU9621157xRlnnBHzzz9/PP/883HbbbeV6jk51lxzzXImz3nnnRc77bRTpHl/AaHZnqSOHeadd95I7XvrrbciLZtaK3DDDRGXX17fOUvxxNK4TBELLFD7ccsvH1GKH5o6QOD734948cXaG5L2ffbZiK99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IEcC++yzT9x44405qlHtVbnssssiDcA8evToePDBB2s68L777ov//u//jqWW8tfrmsDsRIAAAQIECBAgQIBAywUEc1pO7oQEiiWQnmj17W9/u1iV7lXbNKBxGgMnPe78pJNO6rVl1ovp9qzBPsFr1iVbS4AAAQIECBAgQIAAgcYICOY0xlEpBDpWID3ie6uttio/7amo
jVx66aXLjyB/4403YrPNNovx48fPsilpjJ30mPL0WHYTAQIECBAgQIAAAQIE8iogmJPXnlEvAjkSOPHEE+Owww7LUY0GVpWjjjoqjj766PJtV5dccslMhaQ2praaCBAgQIAAAQIECBAgkGcBwZw89466EciJQHpE9yGHHFIOhOSkSgOuxnrrrRfjxo2L6667rnzrVVbQueeeG2nbqquumq0yJ0CAAAECBAgQIECAQC4FBHNy2S0qRSB/At/73vfi9NNPj7feeqvtlfvyl78c77777qDqcfbZZ8cWW2wRiy++eNx5553lzCNZOYMidTABAgQIECBAgAABAi0SEMxpEbTTEOgEgUsvvTQXgwOPHDkyzjvvvEGTfvrTn45HH3009txzzzj++ONjoYUWGnSZCiBAgAABAgQIECBAgECzBQRzmi2sfAIdJPDJT34yNtxwwzj88MPb2qpdd901LrrooobU4cILLyxn6KRsHxMBAgQIECBAgAABAgSKICCYU4ReUkcCORI46KCD4qWXXooUBGnXtP7668ezzz4bY8eOHVQV/vrXv8Zll10WP/vZzwZVjoMJECBAgAABAgQIECDQSgHBnFZqOxeBDhFItzideuqpcd9997WtRYPNzkmPKU+3WY0ZM6ZtbXBiAgQIECBAgAABAgQIDERAMGcgao4hQCDuueee2GabbWL8+PFt0dhtt90GlR308Y9/PP75z3+2pe5OSoAAAQIECBAgQIAAgcEICOYMRs+xBLpcID3ie6WVVorbbrut5RLpvAsssEDcdddddZ376aefLj/BKh23xBJL1HWsnQkQIECAAAECBAgQIJAHAcGcPPSCOhAoqMCwYcPizTffLA+IfNZZZ7W8FfXeanXttdfG5ptvXh5vJwWCTAQIECBAgAABAgQIECiigGBOEXtNnQnkTOBvf/tbPPDAA7H//vu3tGa77757/OY3v6npnD/60Y/inHPOKQ+aPN9889V0jJ0IECBAgAABAgQIECCQRwHBnDz2ijoRKKDAGWecEauttlqkR3w/+uijLWlByq5Zb7314vrrr+/3fC+//HI5c2jSpElx9dVX97ufDQQIECBAgAABAgQIECiKgGBOUXpKPQkUQGCfffaJr371q+WnRO29997x+uuvN73W1QZCPuyww2LNNdeMDTfcMI477rim18UJCBAgQIAAAQIECBAg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5Hs639tLV4aW+RnIz4JFYKlAnmb12WeLR+gsff7FFyPy4sfbty991p8JEOgg4DSrZZiC06yWAdlLrCqBvCx7Xs8pD/fdsSMiDwe3CIwJ3LwZce5cxO7dEXkUl0WgEshTO/M0vFdeiXjmmaradgLzK5A3u7h+PWLbtog8CtYiUAlkEJh3J8rvj0LuSst2Aisn4ALIK2fvlQkQGBDIIy2ef35go6cJPEIgT6k6f/4RGzxFYEAgf6n1i+0AjqdXlUCGla+9tqp2yc48YYEXXojI/ywCBHoL+Pfu3vPRHQECBAgQIECAAAECBAgQIEBgRkCYM8PhAQECBAgQIECAAAECBAgQIECgt4Awp/d8dEeAAAECBAgQIECAAAECBAgQmBEQ5sxweECAAAECBAgQIECAAAECBAgQ6C0gzOk9H90RIECAAAECBAgQIECAAAECBGYEhDkzHB4QIECAAAECBAgQIECAAAECBHoLCHN6z0d3BAgQIECAAAECBAgQIECAAIEZAWHODIcHBAgQIECAAAECBAgQIECAAIHeAsKc3vPRHQECBAgQIECAAAECBAgQIEBgRkCYM8PhAQECBAgQIECAAAECBAgQIECgt4Awp/d8dEeAAAECBAgQIECAAAECBAgQmBFYN/PIgyci8McfEd9+G/Hss0/ky/+nL/rzzxHZl0WAAAECBAgQIECAAAECBAjMl8Cavx6u+Wp5/rpdWIj44IOI9ev79P7nnxEHD0a8916fnnRCgAABAgQIECBAgAABAgQI1ALCnNpIBQECBAgQIECAAAECBAgQIECgjYBr5rQZhUYIECBAgAABAgQIECBAgAABArWAMKc2UkGAAAECBAgQIECAAAECBAgQaCMgzGkzCo0QIECAAAECBAgQIECAAAECBGoBYU5tpIIAAQIECBAgQIAAAQIECBAg0EZAmNNmFBohQIAAAQIECBAgQIAAAQIECNQCwpzaSAUBAgQIECBAgAABAgQIECBAoI2AMKfNKDRCgAABAgQIECBAgAABAgQIEKgFhDm1kQoCBAgQIECAAAECBAgQIECAQBsBYU6bUWiEAAECBAgQIECAAAECBAgQIFALCHNqIxUECBAgQIAAAQIECBAgQIAAgTYCwpw2o9AIAQIECBAgQIAAAQIECBAgQKAWEObURioIECBAgAABAgQIECBAgAABAm0EhDltRqERAgQIECBAgAABAgQIECBAgEAtIMypjVQQIECAAAECBAgQIECAAAECBNoICHPajEIjBAgQIECAAAECBAgQIECAAIFaQJhTG6kgQIAAAQIECBAgQIAAAQIECLQREOa0GYVGCBAgQIAAAQIECBAgQIAAAQK1gDCnNlJBgAABAgQIECBAgAABAgQIEGgjIMxpMwqNECBAgAABAgQIECBAgAABAgRqAWFObaSCAAECBAgQIECAAAECBAgQINBGQJjTZhQaIUCAAAECBAgQIECAAAECBAjUAsKc2kgFAQIECBAgQIAAAQIECBAgQKCNgDCnzSg0QoAAAQIECBAgQIAAAQIECBCoBYQ5tZEKAgQIECBAgAABAgQIECBAgEAbAWFOm1FohAABAgQIECBAgAABAgQIECBQCwhzaiMVBAgQIECAAAECBAgQIECAAIE2AsKcNqPQCAECBAgQIECAAAECBAgQIECgFhDm1EYqCBAgQIAAAQIECBAgQIAAAQJtBIQ5bUahEQIECBAgQIAAAQIECBAgQIBALSDMqY1UECBAgAABAgQIECBAgAABAgTaCAhz2oxCIwQIECBAgAABAgQIECBAgACBWkCYUxupIECAAAECBAgQIECAAAECBAi0ERDmtBmFRggQIECAAAECBAgQIECAAAECtYAwpzZSQYAAAQIECBAgQIAAAQIECBBoIyDMaTMKjRAgQIAAAQIECBAgQIAAAQIEagFhTm2kggABAgQIECBAgAABAgQIECDQRkCY02YUGiFAgAABAgQIECBAgAABAgQI1ALCnNpIBQECBAgQIECAAAECBAgQIECgjYAwp80oNEKAAAECBAgQIECAAAECBAgQqAWEObWRCgIECBAgQIAAAQIECBAgQIBAGwFhTptRaIQAAQIECBAgQIAAAQIECBAgUAsIc2ojFQQIECBAgAABAgQIECBAgACBNgLCnDaj0AgBAgQIECBAgAABAgQIECBAoBYQ5tRGKggQIECAAAECBAgQIECAAAECbQSEOW1GoRECBAgQIECAAAECBAgQIECAQC0gzKmNVBAgQIAAAQIECBAgQIAAAQIE2ggIc9qMQiMECBAgQIAAAQIECBAgQIAAgVpAmFMbqSBAgAABAgQIECBAgAABAgQItBEQ5rQZhUYIECBAgAABAgQIECBAgAABArWAMKc2UkGAAAECBAgQIECAAAECBAgQaCMgzGkzCo0QIECAAAECBAgQIECAAAECBGoBYU5tpIIAAQIECBAgQIAAAQIECBAg0EZAmNNmFBohQIAAAQIECBAgQIAAAQIECNQCwpzaSAUBAgQIECBAgAABAgQIECBAoI2AMKfNKDRCgAABAgQIECBAgAABAgQIEKgFhDm1kQoCBAgQIECAAAECBAgQIECAQBsBYU6bUWiEAAECBAgQIECAAAECBAgQIFALCHNqIxUECBAgQIAAAQIECBAgQIAAgTYCwpw2o9AIAQIECBAgQIAAAQIECBAgQKAWEObURioIECBAgAABAgQIECBAgAABAm0EhDltRqERAgQIECBAgAABAgQIECBAgEAtIMypjVQQIECAAAECBAgQIECAAAECBNoICHPajEIjBAgQIECAAAECBAgQIECAAIFaQJhTG6kgQIAAAQIECBAgQIAAAQIECLQREOa0GYVGCBAgQIAAAQIECBAgQIAAAQK1gDCnNlJBgAABAgQIECBAgAABAgQIEGgjIMxpMwqNECBAgAABAgQIECBAgAABAgRqAWFObaSCAAECBAgQIECAAAECBAgQINBGQJjTZhQaIUCAAAECBAgQIECAAAECBAjUAsKc2kgFAQIECBAgQIAAAQIECBAgQKCNgDCnzSg0QoAAAQIECBAgQIAAAQIECBCoBYQ5tZEKAgQIECBAgAABAgQIECBAgEAbAWFOm1FohAABAgQIECBAgAABAgQIECBQCwhzaiMVBAgQIECAAAECBAgQIECAAIE2AsKcNqPQCAECBAgQIECAAAECBAgQIECgFhDm1EYqCBAgQIAAAQIECBAgQIAAAQJtBIQ5bUahEQIECBAgQIAAAQIECBAgQIBALSDMqY1UECBAgAABAgQIECBAgAABAgTaCAhz2oxCIwQIECBAgAABAgQIECBAgACBWkCYUxupIECAAAECBAgQIECAAAECBAi0ERDmtBmFRggQIECAAAECBAgQIECAAAECtYAwpzZSQYAAAQIECBAgQIAAAQIECBBoIyDMaTMKjRAgQIAAAQIECBAgQIAAAQIEagFhTm2kggABAgQIECBAgAABAgQIECDQRkCY02YUGiFAgAABAgQIECBAgAABAgQI1ALCnNpIBQECBAgQIECAAAECBAgQIECgjYAwp80oNEKAAAECBAgQIECAAAECBAgQqAWEObWRCgIECBAgQIAAAQIECBAgQIBAGwFhTptRaIQAAQIECBAgQIAAAQIECBAgUAsIc2ojFQQIECBAgAABAgQIECBAgACBNgLCnDaj0AgBAgQIECBAgAABAgQIECBAoBYQ5tRGKggQIECAAAECBAgQIECAAAECbQSEOW1GoRECBAgQIECAAAECBAgQIECAQC0gzKmNVBAg
QIAAAQIECBAgQIAAAQIE2ggIc9qMQiMECBAgQIAAAQIECBAgQIAAgVpAmFMbqSBAgAABAgQIECBAgAABAgQItBEQ5rQZhUYIECBAgAABAgQIECBAgAABArWAMKc2UkGAAAECBAgQIECAAAECBAgQaCMgzGkzCo0QIECAAAECBAgQIECAAAECBGoBYU5tpIIAAQIECBAgQIAAAQIECBAg0EZAmNNmFBohQIAAAQIECBAgQIAAAQIECNQCwpzaSAUBAgQIECBAgAABAgQIECBAoI2AMKfNKDRCgAABAgQIECBAgAABAgQIEKgFhDm1kQoCBAgQIECAAAECBAgQIECAQBsBYU6bUWiEAAECBAgQIECAAAECBAgQIFAL/A2Bz1Pb0vXiOAAAAABJRU5ErkJggg==
        ", extent = {{-30.721, -16.669}, {30.721, 16.669}})}),
        experiment(__Wolfram_SynchronizeWithRealTime = false),
        Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
    end SupercapacitorZubieta;

    model SupercapacitorBasic "A first supercapacitor equivalent circuit"
      Modelica.Electrical.Analog.Basic.Resistor Rs(R(displayUnit = "mOhm") = 0.00025) "Series resistor" annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Capacitor capacitor(C = 3400) annotation(
        Placement(visible = true, transformation(origin = {40, 1.533}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Basic.Resistor Rp(R = 1000) "Resistor in parallel" annotation(
        Placement(visible = true, transformation(origin = {-40, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Interfaces.NegativePin pin_n "Negative pin" annotation(
        Placement(visible = true, transformation(origin = {0, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Interfaces.PositivePin pin_p "Positive pin" annotation(
        Placement(visible = true, transformation(origin = {0, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(pin_p, Rs.p) annotation(
        Line(visible = true, origin = {0, 65}, points = {{0, 15}, {0, -15}}, color = {0, 0, 255}));
      connect(capacitor.p, Rs.n) annotation(
        Line(visible = true, origin = {20, 23.883}, points = {{20, -12.35}, {20, 3.117}, {-20, 3.117}, {-20, 6.117}}, color = {0, 0, 255}));
      connect(Rp.p, Rs.n) annotation(
        Line(visible = true, origin = {-20, 23.5}, points = {{-20, -13.5}, {-20, 3.5}, {20, 3.5}, {20, 6.5}}, color = {0, 0, 255}));
      connect(pin_n, Rp.n) annotation(
        Line(visible = true, origin = {-20, -36}, points = {{20, -44}, {20, 16}, {-20, 16}, {-20, 26}}, color = {0, 0, 255}));
      connect(pin_n, capacitor.n) annotation(
        Line(visible = true, origin = {20, -36.383}, points = {{-20, -43.617}, {-20, 16.383}, {20, 16.383}, {20, 27.916}}, color = {0, 0, 255}));
      annotation(
        Documentation(info = "<ul>
<li>Equivalent Cirucit Model.</li>
<li>The most basic supercapacitor model.</li>
<li>Series resistor&nbsp;models internal resistance.</li>
<li>Parallel&nbsp;resistor models long term leakage.</li>
</ul>", revisions = ""),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, origin = {0.808, 8.107}, fillColor = {88, 115, 255}, fillPattern = FillPattern.VerticalCylinder, extent = {{-39.192, -81.893}, {39.192, 81.893}}), Rectangle(visible = true, fillColor = {255, 255, 255}, extent = {{-100, -100}, {100, 100}}), Bitmap(visible = true, origin = {72.684, -60}, fileName = "", imageSource = "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gAABAkLTNUCAAAECBAoFhGYhlGEECBAgQEBougYIECBAgEChgNAshDKMAAECBAgITdcAAQIECBAoFBCahVCGESBAgAABoekaIECAAAEChQJCsxDKMAIECBAgIDRdAwQIECBAoFBAaBZCGUaAAAECBISma4AAAQIECBQKCM1CKMMIECBAgIDQdA0QIECAAIFCAaFZCGUY
AQIECBAQmq4BAgQIECBQKCA0C6EMI0CAAAECQtM1QIAAAQIECgWEZiGUYQQIECBAQGi6BggQIECAQKGA0CyEMowAAQIECAhN1wABAgQIECgUEJqFUIYRIECAAAGh6RogQIAAAQKFAkKzEMowAgQIECAgNF0DBAgQIECgUEBoFkIZRoAAAQIEhKZrgAABAgQIFAoIzUIowwgQIECAgNB0DRAgQIAAgUIBoVkIZRgBAgQIEBCargECBAgQIFAoIDQLoQwjQIAAAQJC0zVAgAABAgQKBYRmIZRhBAgQIEBAaLoGCBAgQIBAoYDQLIQyjAABAgQICE3XAAECBAgQKBQQmoVQhhEgQIAAAaHpGiBAgAABAoUCQrMQyjACBAgQICA0XQMECBAgQKBQQGgWQhlGgAABAgSEpmuAAAECBAgUCgjNQijDCBAgQICA0HQNECBAgACBQgGhWQhlGAECBAgQEJquAQIECBAgUCggNAuhDCNAgAABAkLTNUCAAAECBAoFhGYhlGEECBAgQEBougYIECBAgEChgNAshDKMAAECBAgITdcAAQIECBAoFBCahVCGESBAgAABoekaIECAAAEChQJCsxDKMAIECBAgIDRdAwQIECBAoFBAaBZCGUaAAAECBISma4AAAQIECBQKCM1CKMMIECBAgIDQdA0QIECAAIFCAaFZCGUYAQIECBAQmq4BAgQIECBQKCA0C6EMI0CAAAECQtM1QIAAAQIECgWEZiGUYQQIECBAQGi6BggQIECAQKGA0CyEMowAAQIECAhN1wABAgQIECgUEJqFUIYRIECAAAGh6RogQIAAAQKFAkKzEMowAgQIECAgNF0DBAgQIECgUEBoFkIZRoAAAQIEhKZrgAABAgQIFApsKhxnGAECCxb49a8j/v3vyUn85S+T7z/60eT7Ix4R8axnLfgEbU+gAYENKztvDdSpRAKjFrj22ohTT4144IFJGffeO/l+0EGT7xs3Rlx2WcSznz3qMp08gaUX8Exz6VvkBAlE3HlnxPbtEXfdtafGffdN7h922EMf23OkewQIzELAa5qzULQGAQIECDQhIDSbaLMiCRAgQGAWAkJzForWIECAAIEmBIRmE21WJAECBAjMQkBozkLRGgQIECDQhIB3zzbRZkWOXaB7d2z3sZLue3fb9UGxDRsm9zft/C/54Q+f/OxPAgTyBHxO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
        ", extent = {{-25.089, -37.824}, {25.089, 37.824}})}),
        experiment(__Wolfram_SynchronizeWithRealTime = false),
        Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
    end SupercapacitorBasic;

    model Profile "Lazy profile creation"
      Modelica.Blocks.Math.Add add annotation(
        Placement(visible = true, transformation(origin = {50, 0}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Step step(startTime = 0, height = 30) annotation(
        Placement(visible = true, transformation(origin = {80, 20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Step step1(startTime = 38, height = -30) annotation(
        Placement(visible = true, transformation(origin = {80, -20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add add1 annotation(
        Placement(visible = true, transformation(origin = {50, -20}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Step step2(startTime = 70, height = -30) annotation(
        Placement(visible = true, transformation(origin = {80, -48.18}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add add2 annotation(
        Placement(visible = true, transformation(origin = {50, -60}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Step step3(startTime = 88, height = 30) annotation(
        Placement(visible = true, transformation(origin = {80, -70}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput y annotation(
        Placement(visible = true, transformation(origin = {27, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(add.y, y) annotation(
        Line(visible = true, origin = {33, 0}, points = {{6, 0}, {-6, 0}}, color = {0, 0, 127}));
      connect(step.y, add.u1) annotation(
        Line(visible = true, origin = {65.25, 13}, points = {{3.75, 7}, {-0.25, 7}, {-0.25, -7}, {-3.25, -7}}, color = {0, 0, 127}));
      connect(add.u2, add1.y) annotation(
        Line(visible = true, origin = {54.333, -15.333}, points = {{7.667, 9.333}, {7.667, -4.667}, {-15.333, -4.667}}, color = {0, 0, 127}));
      connect(add1.u2, add2.y) annotation(
        Line(visible = true, origin = {50.5, -39.671}, points = {{11.5, 13.671}, {14.5, 13.671}, {14.5, 6.658}, {-14.5, 6.658}, {-14.5, -20.329}, {-11.5, -20.329}}, color = {0, 0, 127}));
      connect(step3.y, add2.u2) annotation(
        Line(visible = true, origin = {65.25, -68}, points = {{3.75, -2}, {-0.25, -2}, {-0.25, 2}, {-3.25, 2}}, color = {0, 0, 127}));
      connect(add2.u1, step2.y) annotation(
        Line(visible = true, origin = {65.75, -51.09}, points = {{-3.75, -2.91}, {0.25, -2.91}, {0.25, 2.91}, {3.25, 2.91}}, color = {0, 0, 127}));
      connect(step1.y, add1.u1) annotation(
        Line(visible = true, origin = {65.25, -17}, points = {{3.75, -3}, {-0.25, -3}, {-0.25, 3}, {-3.25, 3}}, color = {0, 0, 127}));
      annotation(
        Documentation(info = "<ul>
<li>Charge/discharge profile&nbsp;from the paper by Zubieta et.al.</li>
</ul>", revisions = ""),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, fillColor = {0, 0, 255}, extent = {{-100, -100}, {100, 100}}, radius = 25), Text(visible = true, extent = {{-100, -100}, {100, 100}}, textString = "%name")}),
        Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
    end Profile;
    annotation(
      experiment(__Wolfram_SynchronizeWithRealTime = false),
      Diagram(coordinateSystem(extent = {{-148.5, -105}, {148.5, 105}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})));
  end Components;

  package Examples "Use cases"
    extends Modelica.Icons.ExamplesPackage;

    model RechargeTest "Tests the simple supercapacitor"
      extends Modelica.Icons.Example;
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(visible = true, transformation(origin = {60, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Components.SupercapacitorBasic supercapacitorRechargable(capacitor.C = 500, Rp.R = 10000.0) annotation(
        Placement(visible = true, transformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Sources.SignalCurrent signalCurrent annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-10, -10}, {10, 10}}, rotation = -630)));
      Modelica.Blocks.Sources.TimeTable timeTable(table = {{0.0, 0.0}, {1.0, 30.0}, {40.0, 30.0}, {50.0, 0.0}, {60.0, 0.0}, {61.0, -30.0}, {90.0, -30.0}, {91.0, 0.0}, {100.0, 0.0}}) "Charge/Discarhge profile" annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(ground.p, supercapacitorRechargable.pin_n) annotation(
        Line(visible = true, origin = {10, -1.506}, points = {{50, -68.494}, {50, 21.506}, {-10, 21.506}, {-10, 11.506}}, color = {0, 0, 255}));
      connect(ground.p, signalCurrent.p) annotation(
        Line(visible = true, origin = {5, -60.75}, points = {{55, -9.25}, {-5, -9.25}, {-5, 7.75}, {-5, 10.75}}, color = {0, 0, 255}));
      connect(supercapacitorRechargable.pin_p, signalCurrent.n) annotation(
        Line(visible = true, origin = {-0, -20}, points = {{0, 10}, {-0, -10}}, color = {0, 0, 255}));
      connect(timeTable.y, signalCurrent.i) annotation(
        Line(visible = true, origin = {-18, -40}, points = {{-11, 0}, {11, 0}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -100}, {100, 70}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10})),
        experiment(StartTime = 0.0, StopTime = 200, Interval = 0.01, __Wolfram_Algorithm = "dassl", Tolerance = 1e-6, __Wolfram_MaxStepSize = 0, __Wolfram_EventHysteresisEpsilon = 1e-10, __Wolfram_AccurateEventDetection = true, __Wolfram_NonlinearSolverTolerance = 1e-12, __Wolfram_MaxInternalStepCount = 0, __Wolfram_CheckMinMax = false, __Wolfram_StopAtSteadyState = false, __Wolfram_SynchronizeWithRealTime = false));
    end RechargeTest;

    model EhsaniDischargeTest "Tests the simple supercapacitor"
      extends Modelica.Icons.Example;
      Components.SupercapacitorEhsani supercapacitor annotation(
        Placement(visible = true, transformation(origin = {-40, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -270)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(visible = true, transformation(origin = {-40, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.ConstantCurrent constantCurrent(I = 50) annotation(
        Placement(visible = true, transformation(origin = {40, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    equation
      connect(constantCurrent.n, supercapacitor.pin_n) annotation(
        Line(visible = true, origin = {0, -28.494}, points = {{40, 18.494}, {40, -1.506}, {-40, -1.506}, {-40, 18.494}}, color = {0, 0, 255}));
      connect(supercapacitor.pin_p, constantCurrent.p) annotation(
        Line(visible = true, origin = {-0, 38.494}, points = {{-40, -28.494}, {-40, 1.506}, {40, 1.506}, {40, -28.494}}, color = {0, 0, 255}));
      connect(supercapacitor.pin_n, ground.p) annotation(
        Line(visible = true, origin = {-40, -20}, points = {{0, 10}, {0, -10}}, color = {0, 0, 255}));
      annotation(
        experiment(StopTime = 100, __Wolfram_SynchronizeWithRealTime = false));
    end EhsaniDischargeTest;

    model ZubietaDischargeTest470 "Tests the simple supercapacitor"
      extends Modelica.Icons.Example;
      Components.SupercapacitorZubieta supercapacitor(Ri.R = 0.0025, Ci0.C = 270, gain.k = 100, Cd.C = 100, Cl.C = 220, Rlea.R = 9000, Rl.R = 5.2, Rd.R = 0.9) annotation(
        Placement(visible = true, transformation(origin = {-40, -0}, extent = {{-10, -10}, {10, 10}}, rotation = -270)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(visible = true, transformation(origin = {-80, -20}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Sources.SignalCurrent signalCurrent annotation(
        Placement(visible = true, transformation(origin = {20, 0}, extent = {{-10, 10}, {10, -10}}, rotation = 90)));
      Components.Profile profile annotation(
        Placement(visible = true, transformation(origin = {50, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -540)));
    equation
      connect(signalCurrent.i, profile.y) annotation(
        Line(visible = true, points = {{-6.5, 0}, {6.5, 0}}, color = {0, 0, 127}, origin = {33.5, 0}));
      connect(supercapacitor.pin_n, ground.p) annotation(
        Line(visible = true, origin = {-50, -16.667}, points = {{10, 6.667}, {10, -3.333}, {-20, -3.333}}, color = {0, 0, 255}));
      connect(supercapacitor.pin_n, signalCurrent.p) annotation(
        Line(visible = true, origin = {-10, -38.494}, points = {{-30, 28.494}, {-30, -1.506}, {30, -1.506}, {30, 28.494}}, color = {0, 0, 255}));
      connect(signalCurrent.n, supercapacitor.pin_p) annotation(
        Line(visible = true, origin = {-10, 28.494}, points = {{30, -18.494}, {30, 1.506}, {-30, 1.506}, {-30, -18.494}}, color = {0, 0, 255}));
      annotation(
        experiment(StartTime = 0.0, StopTime = 140, Interval = 0.01, __Wolfram_Algorithm = "dassl", Tolerance = 1e-6, __Wolfram_MaxStepSize = 0, __Wolfram_EventHysteresisEpsilon = 1e-10, __Wolfram_AccurateEventDetection = true, __Wolfram_NonlinearSolverTolerance = 1e-12, __Wolfram_MaxInternalStepCount = 0, __Wolfram_CheckMinMax = false, __Wolfram_StopAtSteadyState = false, __Wolfram_SynchronizeWithRealTime = false));
    end ZubietaDischargeTest470;

    model FMUExportExample "Tests the simple supercapacitor"
      extends Modelica.Icons.Example;
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(visible = true, transformation(origin = {60, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Supercapacitors.Components.SupercapacitorBasic supercapacitorRechargable(capacitor.C = 500, Rp.R = 10000.0) annotation(
        Placement(visible = true, transformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
      Modelica.Electrical.Analog.Sources.SignalCurrent signalCurrent annotation(
        Placement(visible = true, transformation(origin = {0, -40}, extent = {{-10, -10}, {10, 10}}, rotation = -630)));
      Modelica.Blocks.Interfaces.RealInput CurrentInput "Current profile to charge/discharge with" annotation(
        Placement(visible = true, transformation(origin = {-70, -40}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-70, -29.412}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      Modelica.Electrical.Analog.Sensors.PotentialSensor potentialSensor annotation(
        Placement(visible = true, transformation(origin = {0, 40}, extent = {{-10, -10}, {10, 10}}, rotation = -270)));
      Modelica.Blocks.Interfaces.RealOutput VoltageOuput "Voltage from supercapacitor" annotation(
        Placement(visible = true, transformation(origin = {0, 63.235}, extent = {{-10, -10}, {10, 10}}, rotation = -270), iconTransformation(origin = {0, 92.042}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(potentialSensor.phi, VoltageOuput) annotation(
        Line(visible = true, origin = {0, 57.118}, points = {{0, -6.118}, {0, 6.118}}, color = {0, 0, 127}));
      connect(supercapacitorRechargable.pin_n, potentialSensor.p) annotation(
        Line(visible = true, origin = {0, 20}, points = {{-0, -10}, {0, 10}}, color = {0, 0, 255}));
      connect(signalCurrent.i, CurrentInput) annotation(
        Line(visible = true, origin = {-38.5, -40}, points = {{31.5, 0}, {-31.5, 0}}, color = {0, 0, 127}));
      connect(ground.p, supercapacitorRechargable.pin_n) annotation(
        Line(visible = true, origin = {10, -1.506}, points = {{50, -68.494}, {50, 21.506}, {-10, 21.506}, {-10, 11.506}}, color = {0, 0, 255}));
      connect(ground.p, signalCurrent.p) annotation(
        Line(visible = true, origin = {5, -60.75}, points = {{55, -9.25}, {-5, -9.25}, {-5, 7.75}, {-5, 10.75}}, color = {0, 0, 255}));
      connect(supercapacitorRechargable.pin_p, signalCurrent.n) annotation(
        Line(visible = true, origin = {-0, -20}, points = {{0, 10}, {-0, -10}}, color = {0, 0, 255}));
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -100}, {100, 70}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10})),
        experiment(StartTime = 0.0, StopTime = 200, Interval = 0.01, __Wolfram_Algorithm = "dassl", Tolerance = 1e-6, __Wolfram_MaxStepSize = 0, __Wolfram_EventHysteresisEpsilon = 1e-10, __Wolfram_AccurateEventDetection = true, __Wolfram_NonlinearSolverTolerance = 1e-12, __Wolfram_MaxInternalStepCount = 0, __Wolfram_CheckMinMax = false, __Wolfram_StopAtSteadyState = false, __Wolfram_SynchronizeWithRealTime = false));
    end FMUExportExample;
  end Examples;
  annotation(
    Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = false, initialScale = 0.1, grid = {10, 10}), graphics = {Line(visible = true, points = {{-6, 70}, {-6, -70}}, color = {0, 0, 255}, thickness = 1), Line(visible = true, points = {{-90, 0}, {-6, 0}}, color = {0, 0, 255}, thickness = 1), Line(visible = true, points = {{6, 0}, {90, 0}}, color = {0, 0, 255}, thickness = 1), Line(visible = true, origin = {11.608, 0}, points = {{-6, 70}, {-6, -70}}, color = {0, 0, 255}, thickness = 1)}),
    experiment(__Wolfram_SynchronizeWithRealTime = false));
end Supercapacitors;